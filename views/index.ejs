<!DOCTYPE html>
<html>

<head>
	<meta charset="UTF-8">
	<title>Music Player</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="/css/main.css?v=2">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>

<body>
	<div class="opensettings" id="opensettingsbtn"><i class="fa-solid fa-bars"></i></div>

	<div class="settings" id="settingspanel">
		<div class="closebtn" id="settingsclosebtn"><i class="fa-regular fa-circle-xmark"></i></div>

		<div class="refreshbtn" id="refreshbtn"><i class="fa-solid fa-rotate-right"></i></div>

		<div class="infopanel" id="infopanel">
			<div class="heading">Information</div>
			<div class="infobox">Downloaded songs: <div id="songcount" class="value">3333</div>
			</div>
			<div class="infobox">Overall size: <div id="songsize" class="value">3333</div>
				<div class="metricsTag"> GB</div>
			</div>
		</div>


		<div class="infopanel" style="margin-top:40px">
			<div class="heading">Settings</div>

			<form method='post' action="/clear-playlist">
				<button class="btn">Clear playlist</button>
			</form>

			<button class="btn" disabled>Pause requests</button>

			<form method='post' action="/delete-songs">
				<button class="btn" id="deleteall">Delete all downloaded songs & clear playlist</button>
			</form>


		</div>
	</div>


	<div class="playlist"></div>


	<div class="player">
		<audio id="audioPlayer" controls style="display:none">
			Your browser does not support the audio element.
		</audio>

		<div class="controls">
			<button id="skipback" onclick="skipBack(playlist)"><i class="fa-solid fa-backward-step"></i></button>
			<button id="playstop" onclick="togglePlayPause()"><i class="fa-solid fa-play"></i></button>
			<button id="skipforward" onclick="skipNext(playlist)"><i class="fa-solid fa-forward-step"></i></button>
		</div>

		<div class="currentsong">
			<div id="currentsongname" class="name"></div>
		</div>

		<div class="timeline">
			<div class="time" id="duration-played">0:00</div>
			<div class="timeline-container">
				<div class="timeline" id="customTimeline"></div>
			</div>
			<div class="time" id="duration-full">0:00</div>
		</div>


		<div class="volume-container">
			<div class="icon"><i class="fa-solid fa-volume-high"></i></div>
			<input type="range" id="customVolume" min="0" max="1" step="0.01" value="0.2" class="volume-slider">
		</div>




	</div>

	<script>
		const audioPlayer = document.getElementById('audioPlayer');
		audioPlayer.preload = 'auto';
		const durationFullElement = document.getElementById('duration-full');
		const currentsongname = document.getElementById('currentsongname');
		audioPlayer.volume = 0.2;
		let currentSongIndex = 0;
		let ws;

		function encodeCustomURIComponent(str) {
			return encodeURIComponent(str.replace(/ /g, '_'));
		}

		function loadSong(index, playlist) {
			const song = playlist[index];
			if (song) {
				const wasPlaying = !audioPlayer.paused;  // Check if audioPlayer was playing before updating
				audioPlayer.src = `/songs/${encodeCustomURIComponent(song.originalName)}.mp3`;
				audioPlayer.load();
				if (wasPlaying) {
					audioPlayer.play();
				}

				durationFullElement.innerText = song.duration;
				currentsongname.innerText = song.name;
			}
		}




		function togglePlayPause() {
			if (audioPlayer.paused) {
				audioPlayer.play();
				let btn = document.getElementById("playstop");
				btn.innerHTML = '<i class="fa-solid fa-pause"></i>';
			} else {
				audioPlayer.pause();
				let btn = document.getElementById("playstop");
				btn.innerHTML = '<i class="fa-solid fa-play"></i>'
			}
		}

		function skipNext(playlist) {
			currentSongIndex = (currentSongIndex + 1) % playlist.length;
			loadSong(currentSongIndex, playlist);
			let btn = document.getElementById("playstop");
			btn.innerHTML = '<i class="fa-solid fa-pause"></i>';
			audioPlayer.play();
		}

		function skipBack(playlist) {
			currentSongIndex = (currentSongIndex - 1 + playlist.length) % playlist.length;
			loadSong(currentSongIndex, playlist);
			let btn = document.getElementById("playstop");
			btn.innerHTML = '<i class="fa-solid fa-pause"></i>';
			audioPlayer.play();
		}

		audioPlayer.addEventListener('ended', () => {
			skipNext(window.playlist);
		});

		function updatePlaylistUI(playlist) {
			const playlistDiv = document.querySelector('.playlist');
			playlistDiv.innerHTML = '';

			const currentPlaybackTime = audioPlayer.currentTime;
			const wasPlaying = !audioPlayer.paused;

			playlist.forEach((song, index) => {
				const songDiv = document.createElement('div');
				songDiv.classList.add('song');

				const infoDiv = document.createElement('div');
				infoDiv.classList.add('info');

				const nameDiv = document.createElement('div');
				nameDiv.classList.add('name');
				nameDiv.textContent = song.name;

				const durationDiv = document.createElement('div');
				durationDiv.classList.add('duration');
				durationDiv.textContent = song.duration;

				const removeDiv = document.createElement('div');
				removeDiv.classList.add('removebtn');
				removeDiv.innerHTML = '<i id="trashbtn" class="fa-solid fa-trash-can"></i>';

				removeDiv.addEventListener('click', () => {
					removeSongFromPlaylist(index);
				});

				infoDiv.appendChild(nameDiv);
				infoDiv.appendChild(durationDiv);

				songDiv.appendChild(infoDiv);
				songDiv.appendChild(removeDiv);

				playlistDiv.appendChild(songDiv);
			});

			window.playlist = playlist;

			if (wasPlaying) {
				loadSong(currentSongIndex, window.playlist);
				audioPlayer.currentTime = currentPlaybackTime;
				audioPlayer.play();
			} else {
				loadSong(currentSongIndex, window.playlist);
				audioPlayer.currentTime = currentPlaybackTime;
				audioPlayer.pause();
			}
		}

		function removeSongFromPlaylist(index) {
			const removedSong = window.playlist.splice(index, 1)[0];
			updatePlaylistUI(window.playlist);

			fetch('/remove-song', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					songName: removedSong.name,
				}),
			})
				.then(response => {
					if (response.ok) {
						console.log('Song removed successfully');
						getStats();
						return response.text();
					} else {
						throw new Error('Server response not okay');
					}
				})
				.then(data => {
					console.log(data);
				})
				.catch(error => {
					console.error('Error removing song:', error);
				});
		}


		function initWebSocket() {
			ws = new WebSocket(`ws://${window.location.host}`);
			ws.addEventListener('message', (event) => {
				const data = JSON.parse(event.data);
				if (data.type === 'playlist') {
					window.playlist = data.data;
					updatePlaylistUI(window.playlist);

					loadSong(currentSongIndex, window.playlist);

					getStats();
				}
			});
			ws.addEventListener('close', () => {
				console.log('WebSocket connection closed');
			});
		}

		initWebSocket();


		// VLASTNÍ TIMELINE
		const customTimeline = document.getElementById('customTimeline');
		const durationPlayedElement = document.getElementById('duration-played');
		let isDraggingTimeline = false;

		audioPlayer.addEventListener('timeupdate', () => {
			const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;
			customTimeline.innerHTML = `<div class="played" style="width:${progress}%"></div>`;
			durationPlayedElement.textContent = formatTime(audioPlayer.currentTime);
		});

		function formatTime(timeInSeconds) {
			const minutes = Math.floor(timeInSeconds / 60);
			const seconds = Math.floor(timeInSeconds % 60);
			return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
		}

		customTimeline.addEventListener('mousedown', (event) => {
			isDraggingTimeline = true;
			updateTimeline(event);
		});

		document.addEventListener('mousemove', (event) => {
			if (isDraggingTimeline) {
				updateTimeline(event);
			}
		});

		document.addEventListener('mouseup', () => {
			isDraggingTimeline = false;
		});

		function updateTimeline(event) {
			const totalWidth = customTimeline.clientWidth;
			const clickX = event.clientX - customTimeline.getBoundingClientRect().left;
			const percent = (clickX / totalWidth) * 100;
			customTimeline.innerHTML = `<div class="played" style="width:${percent}%"></div>`;
			audioPlayer.currentTime = (percent / 100) * audioPlayer.duration;
		}


		// HLASITOST
		const customVolume = document.getElementById('customVolume');

		customVolume.addEventListener('input', () => {
			const volume = customVolume.value;
			audioPlayer.volume = volume;
		});



		document.addEventListener('DOMContentLoaded', function () {
			const opensettings = document.getElementById('opensettingsbtn');
			const settingspanel = document.getElementById('settingspanel');
			const settingsclosebtn = document.getElementById('settingsclosebtn');
			const refreshbtn = document.getElementById('refreshbtn');

			getStats();

			opensettings.addEventListener('click', function () {
				settingspanel.style.display = 'block';
			});

			settingsclosebtn.addEventListener('click', function () {
				settingspanel.style.display = 'none';
			});

			refreshbtn.addEventListener('click', function () {
				getStats();
			});

		});


		function getStats() {
			fetch('/get-stats', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
			})
				.then(response => response.json())
				.then(data => {
					const songCountDiv = document.getElementById('songcount');
					const songSizeDiv = document.getElementById('songsize');
					songCountDiv.textContent = `${data.songCount}`;
					songSizeDiv.textContent = `${data.totalSizeGB}`;
				})
				.catch(error => console.error('Error fetching song stats:', error));
		}


	</script>





</body>

</html>