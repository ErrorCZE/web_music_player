<!DOCTYPE html>
<html>

<head>
	<meta charset="UTF-8">
	<title>Music Player</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="/css/main.css?v=2">

	<style>
		.player {
			display: flex;
			flex-direction: column;
			align-items: center;
			margin-top: 20px;
		}

		audio {
			width: 300px;
			margin-bottom: 10px;
		}

		.controls {
			display: flex;
			justify-content: center;
		}

		button {
			margin: 0 5px;
			padding: 5px 10px;
			cursor: pointer;
		}


		.timeline-container {
			width: 300px;
			margin-bottom: 10px;
			cursor: pointer;
		}

		.timeline {
			height: 50px;
			background-color: #ccc;
			position: relative;
		}

		.played {
			height: 100%;
			background-color: #4CAF50;
			position: absolute;
			top: 0;
			left: 0;
		}
	</style>
</head>

<body>

	<div class="playlist">
		<% playlist.forEach(song=> { %>
			<div class="song">
				<div class="name">
					<%= song.name %>
				</div>
				<div class="duration">
					<%= song.duration %>
				</div>
			</div>
			<% }) %>
	</div>

	<div class="player">
		<audio id="audioPlayer" controls style="display:none">
			Your browser does not support the audio element.
		</audio>

		<div class="controls">
			<button onclick="skipBack(playlist)">Skip Back</button>
			<button onclick="togglePlayPause()">Play/Pause</button>
			<button onclick="skipNext(playlist)">Skip Next</button>

		</div>

		<div class="timeline-container">
			<div class="timeline" id="customTimeline"></div>
		</div>

	</div>

	<script>
		const audioPlayer = document.getElementById('audioPlayer');
		audioPlayer.volume = 0.2;
		let currentSongIndex = 0;
		let ws;

		function encodeCustomURIComponent(str) {
			return encodeURIComponent(str.replace(/ /g, '_'));
		}

		function loadSong(index, playlist) {
			const song = playlist[index];
			if (song) {
				audioPlayer.src = `/songs/${encodeCustomURIComponent(song.originalName)}.mp3`;
				audioPlayer.load();
				audioPlayer.play();
			}
		}


		function togglePlayPause() {
			if (audioPlayer.paused) {
				audioPlayer.play();
			} else {
				audioPlayer.pause();
			}
		}

		function skipNext(playlist) {
			currentSongIndex = (currentSongIndex + 1) % playlist.length;
			loadSong(currentSongIndex, playlist);
		}

		function skipBack(playlist) {
			currentSongIndex = (currentSongIndex - 1 + playlist.length) % playlist.length;
			loadSong(currentSongIndex, playlist);
		}

		audioPlayer.addEventListener('ended', () => {
			skipNext(window.playlist);
		});

		function updatePlaylistUI(playlist) {
			const playlistDiv = document.querySelector('.playlist');
			playlistDiv.innerHTML = '';

			playlist.forEach(song => {
				const songDiv = document.createElement('div');
				songDiv.classList.add('song');

				const nameDiv = document.createElement('div');
				nameDiv.classList.add('name');
				nameDiv.textContent = song.name;

				const durationDiv = document.createElement('div');
				durationDiv.classList.add('duration');
				durationDiv.textContent = song.duration;

				songDiv.appendChild(nameDiv);
				songDiv.appendChild(durationDiv);

				playlistDiv.appendChild(songDiv);
			});
		}

		function initWebSocket() {
			ws = new WebSocket(`ws://${window.location.host}`);
			ws.addEventListener('message', (event) => {
				const data = JSON.parse(event.data);
				if (data.type === 'playlist') {
					window.playlist = data.data;
					updatePlaylistUI(window.playlist);

					loadSong(currentSongIndex, window.playlist);
				}
			});
			ws.addEventListener('close', () => {
				console.log('WebSocket connection closed');
			});
		}

		initWebSocket();


		// VLASTNÍ TIMELINE
		const customTimeline = document.getElementById('customTimeline');
		let isDraggingTimeline = false;

		audioPlayer.addEventListener('timeupdate', () => {
			const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;
			customTimeline.innerHTML = `<div class="played" style="width:${progress}%"></div>`;
		});

		customTimeline.addEventListener('mousedown', (event) => {
			isDraggingTimeline = true;
			updateTimeline(event);
		});

		document.addEventListener('mousemove', (event) => {
			if (isDraggingTimeline) {
				updateTimeline(event);
			}
		});

		document.addEventListener('mouseup', () => {
			isDraggingTimeline = false;
		});

		function updateTimeline(event) {
			const totalWidth = customTimeline.clientWidth;
			const clickX = event.clientX - customTimeline.getBoundingClientRect().left;
			const percent = (clickX / totalWidth) * 100;
			customTimeline.innerHTML = `<div class="played" style="width:${percent}%"></div>`;
			audioPlayer.currentTime = (percent / 100) * audioPlayer.duration;
		}
	</script>


<script>

</script>





</body>

</html>